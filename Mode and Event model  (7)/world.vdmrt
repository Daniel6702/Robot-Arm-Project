class World

instance variables
    io : IO := new IO();
    current_time : real := 0;

values
    target_angle : real = 55;
    accuracy : real = 0.001; 
    lower_bound : real = target_angle * (1 - accuracy);
    upper_bound : real = target_angle * (1 + accuracy);

operations
    public UpdateTimeStamp : () ==> ()
    UpdateTimeStamp() == duration(0) (
        current_time := time / 1E9;
        echoState();
    );

    public echoHeader: () ==> ()
    echoHeader() == (
        dcl str : seq of char := "Current Time - Angle - Torque - Angular Velocity\n";
        def - = io.echo(str) in skip;
    );

    public round: real ==> real
    round(r) == (
        dcl scaled: real := r * 1000;
        dcl rounded: real := floor(scaled + 0.5);
        return rounded / 1000;
    );

    public echoState: () ==> ()
    echoState() == (
        dcl str : seq of char := "";
        str := str ^ VDMUtil`val2seq_of_char[real](round(current_time));
        str := str ^ " - ";
        str := str ^ VDMUtil`val2seq_of_char[real](round(MySystem`robot_arm.env_angle));
        str := str ^ " - ";
        str := str ^ VDMUtil`val2seq_of_char[real](round(MySystem`motor.GetTorque()));
        str := str ^ " - ";
        str := str ^ VDMUtil`val2seq_of_char[real](round(MySystem`robot_arm.env_ang_vel));
        str := str ^ " - ";
        str := str ^ VDMUtil`val2seq_of_char[<On> | <Off>](MySystem`motor.GetMotorState());
        str := str ^ " - ";
        str := str ^ VDMUtil`val2seq_of_char[<Initialise> | <Normal> | <Degraded> | <Emergency>](MySystem`controller.GetOperationMode());
        str := str ^ "\n";
        def - = io.echo(str) in skip;
    );

    --MySystem`robot_arm.Add_Event(mk_(<MotorFailure>, 0.0, 0.0));

    public TESTSCENARIO : () ==> bool  --PID Test Scenario
    TESTSCENARIO() == (
        echoHeader();
        UpdateTimeStamp();
        MySystem`controller.Set_Motor_State(<On>);
        MySystem`controller.Set_Target_Angle(40);
        UpdateTimeStamp();
        while (abs(MySystem`controller.Get_Last_Error()) > 0.1) do (
            MySystem`controller.Step();
            MySystem`motor.Step();
            MySystem`joint.Step();
            UpdateTimeStamp();
        );
        return true;
    );

    public Scenario11 : () ==> bool
    Scenario11() == (
        echoHeader();
        UpdateTimeStamp();
        while (MySystem`controller.GetOperationMode() = <Initialise>) do (
            MySystem`controller.Step();
            UpdateTimeStamp();
        );
        return true;
    );

    public Scenario10 : () ==> bool  --PID Test Scenario
    Scenario10() == (
        echoHeader();
        UpdateTimeStamp();
        MySystem`controller.Set_Motor_State(<On>);
        MySystem`controller.Set_Target_Angle(35);
        UpdateTimeStamp();
        MySystem`controller.Step();
        UpdateTimeStamp();
        MySystem`robot_arm.Add_Event(mk_(<MotorFailure>, 0.0, 0.0));
        MySystem`robot_arm.HandleEvents();
        UpdateTimeStamp();
        MySystem`controller.Step();
        UpdateTimeStamp();
        MySystem`robot_arm.Add_Event(mk_(<MotorRepair>, 0.0, 0.0));
        MySystem`robot_arm.HandleEvents();
        UpdateTimeStamp();
        MySystem`controller.Step();
        UpdateTimeStamp();
        MySystem`robot_arm.Add_Event(mk_(<Collision>, 0.0, 0.0));
        MySystem`robot_arm.HandleEvents();
        UpdateTimeStamp();

        return true;
    );


    public Scenario12 : () ==> bool  --PID Test Scenario
    Scenario12() == (
        echoHeader();
        UpdateTimeStamp();
        MySystem`controller.Set_Motor_State(<On>);
        MySystem`controller.Set_Target_Angle(35);
        UpdateTimeStamp();
        while (abs(MySystem`controller.Get_Last_Error()) > 0.1) do (
            if (current_time > 50 and current_time < 53.9) then (
                MySystem`robot_arm.Add_Event(mk_(<AngleChange>, 0.0, -20));
            ) else if (current_time > 100 and current_time < 103.9) then (
                MySystem`robot_arm.Add_Event(mk_(<MassChange>, 0.0, 0.3));
            ) else if (current_time > 150 and current_time < 153.9) then (
                MySystem`robot_arm.Add_Event(mk_(<PowerFluctuation>, 0.0, 1.1));
            ); 
            MySystem`robot_arm.HandleEvents();
            MySystem`controller.Step();
            MySystem`motor.Step();
            MySystem`joint.Step();
            UpdateTimeStamp();
        );

        return true;
    );
    

    public Scenario0 : () ==> bool  --PID Test Scenario
    Scenario0() == (
        echoHeader();
        UpdateTimeStamp();
        MySystem`controller.Set_Motor_State(<On>);
        MySystem`controller.Set_Target_Angle(35);

        while (abs(MySystem`controller.Get_Last_Error()) > 0.15) do (
            UpdateTimeStamp();
            MySystem`controller.MonitorCurrentState();
            MySystem`controller.MoveTowardsTargetAngle();
            MySystem`motor.Step();
            MySystem`joint.Step();
        );
        return true;
    );

    public Scenario1 : () ==> bool  -- Quick Change Response Test
    Scenario1() == (
        dcl reachedFirstTarget : bool := false;
        echoHeader();
        UpdateTimeStamp();
        MySystem`controller.Set_Motor_State(<On>);

        -- Initial target angle
        MySystem`controller.Set_Target_Angle(20);

        while (true) do (
            UpdateTimeStamp();

            -- Check if first target is reached
            if not reachedFirstTarget and abs(MySystem`controller.Get_Last_Error()) < 0.2 then (
                reachedFirstTarget := true;
                -- Change to a new target angle suddenly
                MySystem`controller.Set_Target_Angle(70); -- Opposite direction to test responsiveness
            );

            MySystem`controller.Step();
            MySystem`motor.Step();
            MySystem`joint.Step();

            -- Break loop if second target is reached
            if reachedFirstTarget and abs(MySystem`controller.Get_Last_Error()) < 0.2 then (
                return true;
            );
        );
    );

end World