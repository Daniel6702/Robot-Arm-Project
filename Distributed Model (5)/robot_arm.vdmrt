class Robot_Arm

instance variables
    public env_angle: real;     -- current angle
    public env_time: real;      -- current time
    public env_ang_vel: real;   -- angular velocity
    public env_motor_state: <On> | <Off>;   -- motor state
    public state_history : seq of (real * real * <On> | <Off>); -- history of states
    public last_time: real := 0; -- last time step
    
values
    R: real = 1;            -- Radius/length
    public M1: real = -10;       -- Angle limit 1  
    public M2: real = 100;       -- Angle limit 2
    public N1: real = 50;         -- Safe Angle limit 1  
    public N2: real = 60;        -- Safe Angle limit 2

operations
    public Robot_Arm: real ==> Robot_Arm
    Robot_Arm(start_angle) == (
        env_angle := start_angle;
        env_time := 0;
        env_ang_vel := 0;
        env_motor_state := <Off>;
        state_history := [];
        last_time := 0;
    );

    public recordState : () ==> ()
    recordState() == duration(0) (
        state_history := state_history ^ [mk_(env_time, env_angle, env_motor_state)];
    );

    public Get_Angle: () ==> real
    Get_Angle() == duration(1E8) return env_angle;

    public Get_Ang_Vel: () ==> real
    Get_Ang_Vel() == duration(1E8) return env_ang_vel;

    public Get_Motor_State: () ==> <On> | <Off>
    Get_Motor_State() == duration(1E8) return env_motor_state;

    public Set_Ang_Vel: real ==> ()
    Set_Ang_Vel(ang_vel) == duration(5E8) env_ang_vel := ang_vel;

    public Set_Motor_State: (<On> | <Off>) ==> ()
    Set_Motor_State(motor_state) == duration(5E8) env_motor_state := motor_state;

    public Set_Angle: real ==> ()
    Set_Angle(angle) == duration(5E8) env_angle := angle;

    public Get_N1: () ==> real
    Get_N1() == duration(1E8) return N1;

    public Get_N2: () ==> real
    Get_N2() == duration(1E8) return N2;

    public Step: () ==> ()
    Step() == duration(0)
    (   
        dcl t : real := time / 1E9; --current time in seconds
        dcl delta : real := (t - last_time); -- Compute the time elapsed since the last step
        dcl state_val : nat := 0;
        dcl step_size: real := 0;

        last_time := t; -- Update the last_time to the current time for the next iteration

        if env_motor_state = <On> then state_val := 1;
        step_size := env_ang_vel * delta * state_val;

        env_angle := env_angle + step_size;

    )
    pre env_angle >= M1 and env_angle <= M2
    post env_angle >= M1 and env_angle <= M2;

end Robot_Arm
