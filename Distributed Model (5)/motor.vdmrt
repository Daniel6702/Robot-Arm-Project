class Motor

instance variables
    motor_state: <On> | <Off>;
    last_time: real;
    torque: real;
    math : MATH := new MATH();

values
    MAX_TORQUE : real = 10;
    
operations
    public Motor: () ==> Motor
    Motor() == (
        motor_state := <Off>;
        last_time := 0;
        torque := 0;
    );

    public SetMotorState: (<On> | <Off>) ==> ()
    SetMotorState(motor_state_) == duration(5E8) motor_state := motor_state_;

    public GetMotorState: () ==> <On> | <Off>
    GetMotorState() == duration(1E8) return motor_state;

    public SetTorque: real ==> ()
    SetTorque(torque_) == duration(5E8) (
        if abs(torque_) > MAX_TORQUE then (
            if (torque_ > 0) then (
                torque := MAX_TORQUE;
            ) else (
                torque := -MAX_TORQUE;
            )
        ) else (
            torque := torque_;
        )
    );

    public GetTorque: () ==> real
    GetTorque() == duration(1E8) return torque;

    public Step: () ==> ()
    Step() == duration(0)
    (   
        dcl t : real := time / 1E9; 
        dcl delta : real := (t - last_time); 
        dcl ang : real := MySystem`controller.Get_Current_Angle();
        dcl mass : real := MySystem`robot_arm.Get_Mass();
        dcl length : real := MySystem`robot_arm.Get_Length();
        dcl angular_vel : real := MySystem`controller.Get_Current_Ang_Vel();
        dcl g : real := MySystem`robot_arm.Get_G();
        dcl frictional_torque : real := -MySystem`robot_arm.Get_friction() * angular_vel;
        dcl gravity_torque : real := mass * g * length * math.cos(ang*math.pi/180);
        dcl net_torque : real := frictional_torque + gravity_torque + torque;
        dcl angular_acc : real := net_torque / MySystem`robot_arm.Get_I();
        dcl new_angular_vel : real := angular_vel + angular_acc;
        dcl angle_step : real := 0;
        dcl state_val : nat := 0;
        if motor_state = <On> then state_val := 1;
        angle_step := new_angular_vel * delta * state_val;
        MySystem`robot_arm.Adjust_Angle(angle_step);
    )

--thread

--sync
    

end Motor