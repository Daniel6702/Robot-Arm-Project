class World

values
    target_angle : real = 60;
    accuracy : real = 0.005; --1% accuracy
    lower_bound : real = target_angle * (1 - accuracy);
    upper_bound : real = target_angle * (1 + accuracy);

operations
    public Scenario1 : () ==> bool --Scenario 1: Linear
    Scenario1() == (
        
        dcl ang_vel : real := 3.3;
        dcl current_angle : real := MySystem`robot_arm.GetCurrentAngle();

        MySystem`robot_arm.SetAngularVelocity(ang_vel);

        while (current_angle < lower_bound) or (current_angle > upper_bound) do (
            MySystem`robot_arm.Step(0.2);
            current_angle := MySystem`robot_arm.GetCurrentAngle();
        );

        return true;  
    );

    public Scenario2 : () ==> bool --Scenario 2: Exponential decay towards a target angle
    Scenario2() == (
        dcl current_angle : real := MySystem`robot_arm.GetCurrentAngle();

        while (current_angle < lower_bound) or (current_angle > upper_bound) do (
            dcl distance_to_target : real := target_angle - current_angle;
            dcl new_velocity : real := distance_to_target * 0.25;
            MySystem`robot_arm.SetAngularVelocity(new_velocity);
            MySystem`robot_arm.Step(1);
            current_angle := MySystem`robot_arm.GetCurrentAngle();
        );

        return true;
    );

    public Scenario3 : () ==> bool --Scenario 3: Damped Oscillations with Overshoot
    Scenario3() == (
        dcl current_angle : real := MySystem`robot_arm.GetCurrentAngle();
        dcl ang_vel : real := 0; 
        dcl damping_factor : real := 0.85; 
        dcl M : real := 5;
        while not (current_angle >= lower_bound and current_angle <= upper_bound) do (

            -- Check if the arm has overshot the target angle
            if (current_angle > target_angle and ang_vel > -M) then (
                ang_vel := ang_vel - (current_angle - target_angle) * damping_factor;
            );

            if (current_angle < target_angle and ang_vel < M) then (
                ang_vel := ang_vel + (target_angle - current_angle) * damping_factor;
            );


            MySystem`robot_arm.SetAngularVelocity(ang_vel);
            MySystem`robot_arm.Step(1.1); 
            current_angle := MySystem`robot_arm.GetCurrentAngle();
        );

        return true  
    );

    public Scenario4 : () ==> bool --Scenario: Unstable System with Overcompensation
    Scenario4() == (
        dcl current_angle : real := MySystem`robot_arm.GetCurrentAngle();
        dcl ang_vel : real := 8; 
        dcl damping_factor : real := 1.1; 
        while not (current_angle >= lower_bound and current_angle <= upper_bound) do (

            -- Check if the arm has overshot the target angle
            if (current_angle > target_angle and ang_vel > 0) then (
                ang_vel := ang_vel - (current_angle - target_angle) * damping_factor;
            );

            if (current_angle < target_angle and ang_vel < 0) then (
                ang_vel := ang_vel + (current_angle - target_angle) * damping_factor;
            );

            MySystem`robot_arm.SetAngularVelocity(ang_vel);
            MySystem`robot_arm.Step(1.1); 
            current_angle := MySystem`robot_arm.GetCurrentAngle();
        );

        return true  
    );


end World